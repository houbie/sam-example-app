AsyncEventApiFn:
  Type: AWS::Serverless::Function
  Properties:
    FunctionName: !Sub '${AWS::StackName}-async-event-api'
    Handler: sam_example_app/async_event_api_lambda.handler
    Events:
      ApiEvent:
        Type: Api
        Properties:
          Path: /events-async
          Method: POST
          RestApiId: !Ref AsyncInvokeApi
    Policies:
      - 'arn:aws:iam::aws:policy/AWSLambda_FullAccess'
    Environment:
      Variables:
        ASYNC_HANDLER_FN: !Sub '${AWS::StackName}-async-event-handler'
EsyncEventApiLogGroup:
  Type: AWS::Logs::LogGroup
  DependsOn:
    - AsyncEventApiFn
  Properties:
    LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-async-event-api'
    RetentionInDays: 3


AsyncEventHandlerFn:
  Type: AWS::Serverless::Function
  Properties:
    FunctionName: !Sub '${AWS::StackName}-async-event-handler'
    Handler: sam_example_app/async_event_lambda.handler
    Environment:
      Variables:
        EVENT_CONSUMER_URL: !Sub "https://${ConsumerHttpApi}.execute-api.${AWS::Region}.amazonaws.com/${stage}/consumer-events"
AsyncEventHandlerLogGroup:
  Type: AWS::Logs::LogGroup
  DependsOn:
    - AsyncEventApiFn
  Properties:
    LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-async-event-handler'
    RetentionInDays: 3
