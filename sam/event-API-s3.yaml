{% from "sam/macro/async_s3_api.yaml" import async_s3_api with context %}

# you can reuse common design patterns combined with your own conventions by extracting them in macros
{{ async_s3_api("S3Event", bucket="SamAppBucket", path_part="events-s3") }}

S3EventHandlerFn:
  Type: AWS::Serverless::Function
  Properties:
    FunctionName: !Sub '${AWS::StackName}-s3-event-handler'
    Handler: s3_event_lambda.handler
    Events:
      EventRequestCreated:
        Type: S3
        Properties:
          Bucket: !Ref SamAppBucket
          Events: s3:ObjectCreated:Put
          Filter:
            S3Key:
              Rules:
                - { Name: prefix, Value: in/ }
    Policies:
      - S3CrudPolicy:
          BucketName: '{{ env("USER").lower() }}-sam-events'
      - DynamoDBCrudPolicy:
          TableName: !Ref S3RequestTable
    Environment:
      Variables:
        EVENT_CONSUMER_URL: !Sub "https://${SamManagedApi}.execute-api.${AWS::Region}.amazonaws.com/${stage}/consumer-events"
    EventInvokeConfig:
      MaximumRetryAttempts: 1
      DestinationConfig:
        OnFailure:
          Type: Lambda
          Destination: !GetAtt S3EventErrorHandlerFn.Arn
S3EventHandlerLogGroup:
  Type: AWS::Logs::LogGroup
  DependsOn:
    - S3EventHandlerFn
  Properties:
    LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-s3-event-handler'
    RetentionInDays: 3
